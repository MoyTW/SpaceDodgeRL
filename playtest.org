* Session 2020-11-30 7a849c156b2f23bfdb8cd8d324f6a2de792a56a1
+ TODO: the map menu gets really hard to read at big resolutions
  - buttons get spaced out
  - hard to tell which "GO" correlated with which button
+ FIXED: ESCAPE should close the map (& other screens)
+ FIXED: Eventually the scroll in the event log freezes
+ FIXED: Destroyer seems to fire, but the shot hangs (are they in the same tick as player?)
+ FIXED: I could really use an "autoloot sector" button!
+ FIXED: I think...it broke when I took up to my limit in items? yep, InventoryFullCannotStoreException
  - I could use a readout on inventory size, that seems helpful
+ Well game crashed, I'll patch that and continue
+ fixed, confirmed
+ TODO: sometimes cutting beam laser finishes SO FAST you don't even see it
  - basically if you're right up next to a guy
  - this is probably the same with a shot that hits you as you're right next to something
  - fix that Tween timing issue?
+ FIXED: even the inventory doesn't tell you how many slots you have left, that's definitely bad
+ FIXED: inventory still has TODO: item descriptions, rip
+ TODO: there are white squares for...I think items that you've picked up? that vanish when you enter sight
+ FIXED: FoW resets when you load
+ FIXED: projectile paths not drawn when you load
+ TODO: newly picked-up items go to the last column in the inventory?
  - if you use an item in the left column then pick an item up it goes to the right?
+ TODO: you can't hold down button to scroll your menu buttons...annoying!
+ FIXED: intel doesn't auto-use which is annoying
+ FIXED: path danger doesn't take into account collision
+ ending for now ~level 5
+ playing more
+ it'd be really sweet if the readout told you when you picked items up
+ TODO: right...I have the seed the same for every level. should fix that.
+ TODO: carriers are pretty lol to fight, prioritize enemies that you can kill in one hit?
+ FIXED: it doesn't tell you what sector you're in anywhere except for the starting log scroll
+ Approaching Infinity has its log reversed (new entries at top) - uh. wait. what's standard?
+ FIXED: somehow switching levels keeps the danger map from previous level...?
  - ah! it went away after switching to the save screen
  - probably is: jump under fire doesn't clear danger map properly
+ FIXED: jump point can spawn under satellite lol
  - well THAT killed my run, RIP run
+ EMP disable is ABSURDLY long on some of the higher-tier enemies
  - Destroyer in particular

* Session 2020-12-02 3a6c655cd26edb289da3390d656770784c737837
+ FIXED: crash with NPE:
E 0:01:11.273   void SpaceDodgeRL.library.encounter.rulebook.Rulebook.Attack(SpaceDodgeRL.scenes.entities.Entity , SpaceDodgeRL.scenes.entities.Entity , SpaceDodgeRL.scenes.encounter.state.EncounterState ): System.NullReferenceException: Object reference not set to an instance of an object.
  <C++ Error>   Unhandled exception
  <C++ Source>  C:\Users\Travis Moy\Projects\Godot\SpaceDodgeRL\library\encounter\rulebook\Rulebook.cs:124 @ void SpaceDodgeRL.library.encounter.rulebook.Rulebook.Attack(SpaceDodgeRL.scenes.entities.Entity , SpaceDodgeRL.scenes.entities.Entity , SpaceDodgeRL.scenes.encounter.state.EncounterState )()
  <Stack Trace> Rulebook.cs:124 @ void SpaceDodgeRL.library.encounter.rulebook.Rulebook.Attack(SpaceDodgeRL.scenes.entities.Entity , SpaceDodgeRL.scenes.entities.Entity , SpaceDodgeRL.scenes.encounter.state.EncounterState )()
                Rulebook.cs:152 @ Boolean SpaceDodgeRL.library.encounter.rulebook.Rulebook.ResolveMove(SpaceDodgeRL.library.encounter.rulebook.actions.MoveAction , SpaceDodgeRL.scenes.encounter.state.EncounterState )()
                Rulebook.cs:18 @ Boolean SpaceDodgeRL.library.encounter.rulebook.Rulebook+<>c.<.cctor>b__17_2(SpaceDodgeRL.library.encounter.rulebook.EncounterAction , SpaceDodgeRL.scenes.encounter.state.EncounterState )()
                Rulebook.cs:31 @ Boolean SpaceDodgeRL.library.encounter.rulebook.Rulebook.ResolveAction(SpaceDodgeRL.library.encounter.rulebook.EncounterAction , SpaceDodgeRL.scenes.encounter.state.EncounterState )()
                Rulebook.cs:51 @ void SpaceDodgeRL.library.encounter.rulebook.Rulebook+<>c__DisplayClass3_0.<ResolveActionsAndEndTurn>b__0(SpaceDodgeRL.library.encounter.rulebook.EncounterAction )()
                :0 @ void System.Collections.Generic.List`1[[SpaceDodgeRL.library.encounter.rulebook.EncounterAction, SpaceDodgeRL, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]].ForEach(System.Action`1[SpaceDodgeRL.library.encounter.rulebook.EncounterAction] )()
                Rulebook.cs:51 @ void SpaceDodgeRL.library.encounter.rulebook.Rulebook.ResolveActionsAndEndTurn(System.Collections.Generic.List`1[SpaceDodgeRL.library.encounter.rulebook.EncounterAction] , SpaceDodgeRL.scenes.encounter.state.EncounterState )()
                EncounterRunner.cs:177 @ void SpaceDodgeRL.scenes.encounter.EncounterRunner.RunTurn(SpaceDodgeRL.scenes.encounter.state.EncounterState , SpaceDodgeRL.scenes.InputHandler )()
                EncounterRunner.cs:28 @ void SpaceDodgeRL.scenes.encounter.EncounterRunner._Process(Single )()
+ error cause:
  - immediately go to zone 6 every time
  - travel up
  - at sector ~6? the one with destroyers, kill [something]?
  - get error in - OH! OK
+ error reason: `projectileSource` was null?
  - OH! ok: if an entity gets destroyed, but then their bullet kills something after they're destroyed, it will error out, because they'll be out of the State map!

* Session 2020-12-11 ccc366d6d2895f049f56c30309afcf76523a4710
+ TODO: Place map of level generation seeds into the save file, so we can run it back if there's a bug
+ TODO: Inventory screen items with short descriptions/long descriptions are differently-sized
+ TODO: Frigates with cannon shells can move, fire, and hit you with no recourse on your part! Rethink projectile timings, that seems...bad.
  - Also you won't notice because they're resolved entirely in one frame so you don't see it drawing paths at you! ADDRESSED: that is very bad.
  - On the other hand you *can* counter this and the damage isn't unavoidable - move away from them on their turn
  - TODO: Indicate if an enemy will move before your next turn?
+ TODO: Batteries kind of suck, since you have to burn a turn to use them and turns are very valuable!
+ TODO: It looks like it's shoving new inventory items into the far-right column always?
+ I died to a carrier, RIP
  - I thought I was taking no damage but apparently I was! huh. ok then. ...I could really use a replay of the game there because I have no idea what killed me.

** TODO Issue: projectile feedback & paths

So, what's happening with the laser not showing up/fighter cannons hitting you
with no visual feedback:

EncounterRunner.RunTurn(...) runs `numTurnsToRun` entities every
frame. `numTurnsToRun` is set to 15. If you fire a laser projectile, it will
resolve at speed 0, therefore being created, moving, and destroyed (on impact)
within those 15 turns to run. Being created and destroyed within the same frame,
it's really hard to see (it *does* flash a '*' onto your character but nothing
else) and it never draws a danger path.

The same thing is happening with cannon shells from fighters! You don't see
anything drawn to the screen because the calculation all happens within a single
frame.

There are a couple of approaches I'm thinking of:
+ Put a stopper on RunTurn such that it stops running if it exits the tick it
  started on. This doesn't actually solve our laser problem, because the laser
  will resolve on exactly the same tick as the player, so we'd have to
  special-case 0-speed entities (which is nasty-ish but we can do). It would
  ensure every projectile, regardless of speed, would look like it's travelling
  at the same speed, and would significantly increase turn times (1 frame per
  turn taken by projectile...which would end up as, like, 4 frames for a
  25-speed projectile? so not that much).
+ Do all the calculations in one sum but limit the turn duration to a minimum
  time of, I dunno, 100ms? so that we can ensure multiple frames and visual
  feedback. This requires the sprites be decoupled from the state of the map,
  mind, such that they can exist for the UI while not existing on the
  entity. This would fix the tweening issue we have though!
+ Resolve all the calculations ASAP but move entities and projectiles in
  different - wait, no, this is exactly the same as the above, but with an added
  "and now the projectiles move".
